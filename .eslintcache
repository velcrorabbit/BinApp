[{"C:\\Users\\admin\\my-app\\src\\index.js":"1","C:\\Users\\admin\\my-app\\src\\reportWebVitals.js":"2","C:\\Users\\admin\\my-app\\src\\App.js":"3","C:\\Users\\admin\\my-app\\src\\BinDataFunctions.js":"4","C:\\Users\\admin\\my-app\\src\\pages.js":"5"},{"size":516,"mtime":1614254636995,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":572,"mtime":1614248233442,"results":"10","hashOfConfig":"7"},{"size":4450,"mtime":1614248217219,"results":"11","hashOfConfig":"7"},{"size":5047,"mtime":1614253859295,"results":"12","hashOfConfig":"7"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tamoa3",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"q3y812",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"20"},"C:\\Users\\admin\\my-app\\src\\index.js",[],"C:\\Users\\admin\\my-app\\src\\reportWebVitals.js",[],["27","28"],"C:\\Users\\admin\\my-app\\src\\App.js",[],["29","30"],"C:\\Users\\admin\\my-app\\src\\BinDataFunctions.js",["31"],"import brownBinIcon from \"./Images/BrownBin.jpg\";\r\nimport blackBinIcon from \"./Images/BlackBin.jpg\";\r\nimport blueBinIcon from \"./Images/BlueBin.jpg\";\r\nimport greenBinIcon from \"./Images/GreenBin.jpg\";\r\n\r\n// get the needed bin data from the JSON Biffa has provided.\r\nexport function setBinCollection(binJSON, uprn) {\r\n\r\n    var binArray = [];\r\n    var locationObject = null;\r\n\r\n    binJSON.forEach(location => {\r\n        if (location[\"uprn\"] == uprn) {\r\n            locationObject = location;\r\n        }\r\n    });\r\n    if (locationObject) {\r\n        locationObject.data.data.collections.forEach(element => {\r\n            if (element.communal_service === \"false\") {\r\n                var binType = element.bin_type;\r\n                var binImage = getBinImage(binType)\r\n                var dates = [new Date(element.next_date), new Date(element.further_dates[0])]\r\n                if (element.further_dates[1]) {\r\n                    dates.push(new Date(element.further_dates[1]));\r\n                }\r\n                dates.forEach(date => {\r\n                    var binObject = { type: binType, date: date, imageUrl: binImage };\r\n                    binArray.push(binObject);\r\n                });\r\n            }\r\n        });\r\n\r\n        binArray.sort((a, b) => {\r\n            return a.date - b.date;\r\n        })\r\n\r\n        binArray.forEach(element => {\r\n            element.date = getLongDate(element.date);\r\n        });\r\n\r\n\r\n        return binArray;\r\n    }\r\n}\r\n\r\n// get an array of just the unique bin collection days\r\nfunction getArrayOfDates(binArray) {\r\n    var binDates = [];\r\n    binArray.forEach(element => {\r\n        if (!binDates.includes(element.date)) {\r\n            binDates.push(element.date);\r\n        }\r\n    });\r\n    return binDates;\r\n}\r\n\r\n// create an array of bin dates with each bin collected on that date as an object in a nested array.\r\nexport function getArrayOfBinByDate(binArray) {\r\n    var dateArray = getArrayOfDates(binArray);\r\n    var binArrayByDate = [];\r\n    dateArray.forEach(date => {\r\n        var bins = [];\r\n        binArray.forEach(bin => {\r\n            if (bin.date === date) {\r\n                var binType = bin.type;\r\n                var binImage = bin.imageUrl;\r\n                var binObject = { type: binType, imageUrl: binImage }\r\n                bins.push(binObject);\r\n            }\r\n        });\r\n        var rowObject = { date: date, bins: bins };\r\n        binArrayByDate.push(rowObject);\r\n\r\n    });\r\n    return binArrayByDate;\r\n}\r\n\r\nexport function getFutureCollections(binArray) {\r\n\r\n    var futureArray = binArray.slice(1);\r\n\r\n    return <>\r\n        {futureArray.map(binDay => {\r\n            return <div key={binDay.date}>\r\n                <h3>{binDay.date}</h3>\r\n                {binDay.bins.map(bin => {\r\n                    return <img className=\"bin-image\" key={bin.type} src={bin.imageUrl} alt={bin.type} height=\"100\" />;\r\n                })\r\n                }\r\n            </div>\r\n        })}\r\n    </>\r\n}\r\n\r\n// get the html for the first collection in the list that will display on the first page.\r\nexport function getFirstCollectionHTML(binArray) {\r\n\r\n    var rowDate = binArray[0].date;\r\n\r\n    return <>\r\n        <h2>Next bin collection: {binArray[0].date}</h2>\r\n        {binArray.map(element => {\r\n            if (element.date === rowDate) {\r\n                return <img className=\"bin-image\" key={element.type} src={element.imageUrl} alt={element.type} height=\"100\" />\r\n            } else {\r\n                return null;\r\n            }\r\n        })}\r\n    </>\r\n\r\n}\r\n\r\n// change the date object into a more human-readable format\r\nfunction getLongDate(date) {\r\n\r\n    var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n    var longDate = date.getDate() + \" \" + months[date.getMonth()] + \" \" + date.getFullYear();\r\n\r\n    return longDate;\r\n\r\n}\r\n\r\n// get the locations of the image for each bin\r\nfunction getBinImage(binType) {\r\n\r\n    var imageLocation;\r\n\r\n    switch (binType) {\r\n        case \"Blue Bin\":\r\n            imageLocation = blueBinIcon\r\n            break;\r\n        case \"Brown Bin\":\r\n            imageLocation = brownBinIcon\r\n            break;\r\n        case \"Green Bin\":\r\n            imageLocation = greenBinIcon\r\n            break;\r\n        case \"Black / Grey Bin\":\r\n            imageLocation = blackBinIcon\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return imageLocation;\r\n}","C:\\Users\\admin\\my-app\\src\\pages.js",["32"],"import React, { useReducer } from \"react\";\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport './App.css';\r\nimport binData from \"./BinData/testData.json\";\r\nimport addressData from \"./BinData/addresses.json\"\r\nimport * as BinDataFunctions from './BinDataFunctions.js';\r\nimport MCCLogo from \"./Images/MCCLogo.PNG\";\r\nimport settingsIcon from \"./Images/settings.png\";\r\n\r\nexport function Heading() {\r\n    return (\r\n        <div className=\"header\">\r\n            <Link to=\"./\"><img src={MCCLogo} alt=\"Manchester City Council\" /></Link>\r\n            <Link to=\"YourInfo\"><img src={settingsIcon} alt=\"Settings\" /></Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function Home() {\r\n\r\n    const uprn = localStorage.getItem('uprn');\r\n    \r\n    if (uprn === \"undefined\") {\r\n        return (\r\n            <div>\r\n                <p>No bins found, please update your address in the settings</p><br />\r\n                {ReportAnIssue()}<br />\r\n                {recycling()}\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                {BinData(uprn)}<br />\r\n                <Link to={`/FutureCollections?uprn=${uprn}`}>See future collections</Link><br />\r\n                {ReportAnIssue()}<br />\r\n                {recycling()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst formReducer = (state, event) => {\r\n    return {\r\n        ...state,\r\n        [event.name]: event.value\r\n    }\r\n}\r\n\r\nexport function UserInfo() {\r\n\r\n    const [formData, setFormData] = useReducer(formReducer, {});\r\n\r\n    const handleChange = event => {\r\n        setFormData({\r\n            name: event.target.name,\r\n            value: event.target.value,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Settings</h2>\r\n            <form name=\"settingsForm\" onSubmit={(e) => { localStorage.setItem('uprn', formData.address); e.preventDefault(); }}>\r\n                <h3>Your Location</h3>\r\n                <label htmlFor=\"address\">select Address:</label> <br />\r\n                <select name=\"address\" id=\"address\" onChange={handleChange}>\r\n                {displayAddressOptions(addressData)}\r\n                </select>\r\n                <button onClick={localStorage.setItem('uprn', \"undefined\")}>Clear data</button>\r\n                <h3>Notifications</h3>\r\n                <input type=\"checkbox\" id=\"notificationOn\" name=\"notificationOn\"></input>\r\n                <label htmlFor=\"notificationOn\">Turn on notifications the day before your collection</label><br />\r\n                <input type=\"time\" id=\"time\" name=\"time\"></input>\r\n                <label htmlFor=\"time\">Time of notification</label><br />\r\n                <button type=\"submit\">Save Changes</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction displayAddressOptions(addressData){\r\n    return <>\r\n        {addressData.map(address => {\r\n            if (address.uprn == localStorage.getItem('uprn')) {\r\n                return <option value={address.uprn} selected>{address.address}</option>\r\n            } else {\r\n                return <option value={address.uprn}>{address.address}</option>;\r\n            }\r\n        })}\r\n    </>\r\n}\r\n\r\nexport function BinData(uprn) {\r\n\r\n    //Production release will get the binJSON from the Biffa API call\r\n    //The UPRN will come from a GazOPs API lookup.\r\n    //https://www.manchester.gov.uk/site/custom_scripts/bin_dates_gazops/index.php?uprn=000077074250\r\n    if (uprn) {\r\n\r\n        var HTML = BinDataFunctions.getFirstCollectionHTML(BinDataFunctions.setBinCollection(binData, uprn));\r\n\r\n        return <>\r\n            {HTML}\r\n        </>\r\n\r\n    }\r\n    return UserInfo();\r\n}\r\n\r\nexport function FutureCollections() {\r\n\r\n    var {search} = useLocation();\r\n    var uprn = search.slice(6, search.length);\r\n\r\n    return (\r\n        <>\r\n            <h2>Future Collections</h2>\r\n            {BinDataFunctions.getFutureCollections(BinDataFunctions.getArrayOfBinByDate(BinDataFunctions.setBinCollection(binData, uprn)))}\r\n        </>\r\n    );\r\n}\r\n\r\nexport function ReportAnIssue() {\r\n    return (\r\n        <div>\r\n            <h2>Report Something</h2>\r\n            <ul>\r\n                <li>\r\n                    <a href=\"https://www.manchester.gov.uk/info/200084/bins_rubbish_and_recycling/6479/report_a_problem_with_your_bin_collection\">Problem with a collection</a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"https://www.manchester.gov.uk/info/200084/bins_rubbish_and_recycling/6252/bin_missing_damaged_or_a_problem_with_a_collection\">Missing Bin</a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"https://secure.manchester.gov.uk/forms/form/1615/en/report_an_abandoned_bin\">Abandoned Bin</a>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function recycling() {\r\n    return (\r\n        <div>\r\n            <h2>What goes in each bin?</h2>\r\n            <a href=\"https://www.manchester.gov.uk/info/200084/bins_rubbish_and_recycling/6026/see_which_recycling_bin_to_use\">See which recycling bin to use</a>\r\n        </div>\r\n    )\r\n}",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"33","replacedBy":"37"},{"ruleId":"35","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":13,"column":30,"nodeType":"41","messageId":"42","endLine":13,"endColumn":32},{"ruleId":"39","severity":1,"message":"40","line":85,"column":30,"nodeType":"41","messageId":"42","endLine":85,"endColumn":32},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],["43"],["44"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]